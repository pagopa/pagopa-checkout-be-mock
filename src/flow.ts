/* eslint-disable sonarjs/no-identical-functions */
/* eslint-disable extra-rules/no-commented-out-code */
import * as O from "fp-ts/lib/Option";
import * as express from "express";
import * as E from "fp-ts/Either";
import { identity, pipe } from "fp-ts/function";
import { v4 as uuid } from "uuid";
import { logger } from "./logger";
import { SendPaymentResultOutcomeEnum } from "./generated/ecommerce/NewTransactionResponse";

const XPAY_OK_PREFIX = "0";
const XPAY_POLLING_PREFIX = "01";

export enum ErrorCodeCaseXPAY {
  SUCCESS = "0",
  INCORRECT_PARAMS = "1",
  NOT_FOUND = "2",
  INCORRECT_MAC = "3",
  MAC_NOT_PRESENT = "4",
  TIMEOUT = "5",
  INVALID_APIKEY = "7",
  INVALID_CONTRACT = "8",
  DUPLICATE_TRANSACTION = "9",
  INVALID_GROUP = "12",
  TRANSACTION_NOT_FOUND = "13",
  EXPIRED_CARD = "14",
  CARD_BRAND_NOT_PERMITTED = "15",
  INVALID_STATUS = "16",
  EXCESSIVE_AMOUNT = "17",
  RETRY_EXHAUSTED = "18",
  REFUSED_PAYMENT = "19",
  CANCELED_3DS_AUTH = "20",
  FAILED_3DS_AUTH = "21",
  INVALID_CARD = "22",
  INVALID_MAC_ALIAS = "50",
  KO_RETRIABLE = "96",
  GENERIC_ERROR = "97",
  UNAVAILABLE_METHOD = "98",
  FORBIDDEN_OPERATION = "99",
  INTERNAL_ERROR = "100"
}

export enum ErrorCodeCaseVPOS {
  SUCCESS = "00",
  ORDER_OR_REQREFNUM_NOT_FOUND = "01",
  REQREFNUM_INVALID = "02",
  INCORRECT_FORMAT = "03",
  INCORRECT_MAC_OR_TIMESTAMP = "04",
  INCORRECT_DATE = "05",
  UNKNOWN_ERROR = "06",
  TRANSACTION_ID_NOT_FOUND = "07",
  OPERATOR_NOT_FOUND = "08",
  TRANSACTION_ID_NOT_CONSISTENT = "09",
  EXCEEDING_AMOUNT = "10",
  INCORRECT_STATUS = "11",
  CIRCUIT_DISABLED = "12",
  DUPLICATED_ORDER = "13",
  UNSUPPORTED_CURRENCY = "16",
  UNSUPPORTED_EXPONENT = "17",
  REDIRECTION_3DS1 = "20",
  TIMEOUT = "21",
  METHOD_REQUESTED = "25",
  CHALLENGE_REQUESTED = "26",
  PAYMENT_INSTRUMENT_NOT_ACCEPTED = "35",
  MISSING_CVV2 = "37",
  INVALID_PAN = "38",
  XML_EMPTY = "40",
  XML_NOT_PARSABLE = "41",
  INSTALLMENTS_NOT_AVAILABLE = "50",
  INSTALLMENT_NUMBER_OUT_OF_BOUNDS = "51",
  APPLICATION_ERROR = "98",
  TRANSACTION_FAILED = "99"
}

export enum GatewayCase {
  XPAY = 1,
  VPOS = 2
}

export enum SendPaymentResultOutcomeCase {
  UNDEFINED,
  OK,
  KO
}

export enum TransactionOutcomeInfoCase {
  /** start pagopa-ecommerce-outcome */
  OUTCOME_0 = "000",
  OUTCOME_1 = "001",
  OUTCOME_2 = "002",
  OUTCOME_3 = "003",
  OUTCOME_4 = "004",
  OUTCOME_7 = "007",
  OUTCOME_8 = "008",
  OUTCOME_10 = "010",
  OUTCOME_17 = "017",
  OUTCOME_18 = "018",
  OUTCOME_25 = "025",
  OUTCOME_99 = "099",
  OUTCOME_116 = "116",
  OUTCOME_117 = "117",
  OUTCOME_121 = "121"
  /** end pagopa-ecommerce-outcome */
}

export enum FlowCase {
  OK,
  OK_ENABLE_PERSISTENCE,
  /* getPaymentInfo */
  ANSWER_VERIFY_NO_ENTE_BENEFICIARIO,
  FAIL_VERIFY_400_INVALID_INPUT,
  FAIL_VERIFY_404_PPT_STAZIONE_INT_PA_SCONOSCIUTA,
  FAIL_VERIFY_409_PPT_PAGAMENTO_IN_CORSO,
  FAIL_VERIFY_502_PPT_PSP_SCONOSCIUTO,
  FAIL_VERIFY_404_PAA_PAGAMENTO_SCONOSCIUTO,
  FAIL_VERIFY_503_PPT_STAZIONE_INT_PA_TIMEOUT,
  FAIL_VERIFY_502_GENERIC_ERROR,
  /* activatePayment */
  FAIL_ACTIVATE_400_INVALID_INPUT,
  FAIL_ACTIVATE_404_PPT_STAZIONE_INT_PA_SCONOSCIUTA,
  FAIL_ACTIVATE_409_PPT_PAGAMENTO_IN_CORSO,
  FAIL_ACTIVATE_502_PPT_PSP_SCONOSCIUTO,
  FAIL_ACTIVATE_404_PAA_PAGAMENTO_SCONOSCIUTO,
  FAIL_ACTIVATE_503_PPT_STAZIONE_INT_PA_TIMEOUT,
  FAIL_ACTIVATE_502_GENERIC_ERROR,
  /* pagopa-proxy: getActivationStatus */
  FAIL_PAYMENT_STATUS_400,
  FAIL_PAYMENT_STATUS_404,
  FAIL_PAYMENT_STATUS_502,
  FAIL_PAYMENT_STATUS_500,
  /* payment-manager: addWalletUsingPOST */
  ANSWER_ADD_WALLET_STATUS_201,
  FAIL_ADD_WALLET_STATUS_403,
  FAIL_ADD_WALLET_STATUS_404,
  /* payment-manager: startSessionUsingPOST */
  ANSWER_START_SESSION_STATUS_201,
  FAIL_START_SESSION_STATUS_401,
  FAIL_START_SESSION_STATUS_403,
  FAIL_START_SESSION_STATUS_404,
  FAIL_START_SESSION_STATUS_422,
  FAIL_START_SESSION_STATUS_500,
  /* payment-manager: approveTermsUsingPOST */
  FAIL_APPROVE_TERMS_STATUS_404,
  FAIL_APPROVE_TERMS_STATUS_422,
  FAIL_APPROVE_TERMS_STATUS_500,
  /* payment-manager: pay3ds2UsingPOST */
  ANSWER_PAY_3DS2_STATUS_201,
  FAIL_PAY_3DS2_STATUS_401,
  FAIL_PAY_3DS2_STATUS_403,
  FAIL_PAY_3DS2_STATUS_404,
  /* payment-manager: checkStatusUsingGET */
  FAIL_CHECK_STATUS_404,
  FAIL_CHECK_STATUS_422,
  FAIL_CHECK_STATUS_500,
  NODO_TAKEN_IN_CHARGE,
  /* pagopa-ecommerce: auth-request */
  FAIL_AUTH_REQUEST_TRANSACTION_ID_NOT_FOUND,
  FAIL_AUTH_REQUEST_TRANSACTION_ID_ALREADY_PROCESSED,
  /* pagopa-ecommerce: ACTIVATION generate trasactionId for xpay */
  ACTIVATE_XPAY_TRANSACTION_ID_WITH_PREFIX_SUCCESS,
  ACTIVATE_XPAY_TRANSACTION_ID_WITH_PREFIX_SUCCESS_2_RETRY,
  ACTIVATE_XPAY_TRANSACTION_ID_WITH_PREFIX_NOT_FOUND,
  /* pagopa-ecommerce: ACTIVATION generate trasactionId for vpos */
  ACTIVATE_VPOS_TRASACTION_ID_WITH_PREFIX_DIRECT_AUTH,
  ACTIVATE_VPOS_TRASACTION_ID_WITH_PREFIX_METHOD_AUTH,
  ACTIVATE_VPOS_TRASACTION_ID_WITH_PREFIX_CHALLENGE_AUTH,
  ACTIVATE_VPOS_TRASACTION_ID_WITH_PREFIX_METHOD_CHALLENGE_AUTH,
  ACTIVATE_VPOS_TRASACTION_ID_WITH_PREFIX_DIRECT_DENY,
  ACTIVATE_VPOS_TRASACTION_ID_WITH_PREFIX_METHOD_DENY,
  ACTIVATE_VPOS_TRASACTION_ID_WITH_PREFIX_CHALLENGE_DENY,
  ACTIVATE_VPOS_TRASACTION_ID_WITH_PREFIX_METHOD_CHALLENGE_DENY,
  ACTIVATE_VPOS_TRASACTION_ID_WITH_PREFIX_PAYMENT_NOT_FOUND,
  /* pagopa-ecommerce: calculate/fee */
  OK_ABOVETHRESHOLD_CALUCLATE_FEE,
  OK_BELOWTHRESHOLD_CALUCLATE_FEE,
  FAIL_CALCULATE_FEE,
  /* pagopa-ecommerce: user transaction cancel */
  OK_TRANSACTION_USER_CANCEL,
  ID_NOT_FOUND_TRANSACTION_USER_CANCEL,
  INTERNAL_SERVER_ERROR_TRANSACTION_USER_CANCEL,

  /* pagopa-ecommerce: user transaction final pgs state */
  NOTIFICATION_REQUESTED,
  NOTIFICATION_ERROR,
  NOTIFIED_KO,
  REFUNDED,
  REFUND_REQUESTED,
  REFUND_ERROR,
  CLOSURE_ERROR,
  EXPIRED,
  EXPIRED_NOT_AUTHORIZED,
  CANCELED,
  CANCELLATION_EXPIRED,
  UNAUTHORIZED,
  /* pagopa-ecommerce: waiting sendPaymentResult */
  CLOSED,
  FAIL_AUTH_REQUEST_5XX,
  FAIL_ACTIVATE_503_PPT_STAZIONE_INT_PA_ERRORE_RESPONSE,
  /* pagopa-ecommerce: calculate/fee not found */
  NOT_FOUND_CALCULATE_FEE,
  FAIL_ACTIVATE_502_PPT_WISP_SESSIONE_SCONOSCIUTA,
  /* pagopa-checkout-auth-service: post auth token 5xx */
  FAIL_POST_AUTH_TOKEN,
  FAIL_POST_AUTH_TOKEN_503,
  FAIL_POST_AUTH_TOKEN_504,
  FAIL_POST_AUTH_TOKEN_429,
  FAIL_GET_USERS_401,
  FAIL_GET_USERS_500,
  FAIL_UNAUTHORIZED_401,
  FAIL_UNAUTHORIZED_401_PAYMENT_REQUESTS,
  FAIL_LOGOUT_400,
  FAIL_LOGOUT_500,

  /** start pagopa-ecommerce: handle final outcome page for NPG status */
  /** Please note these tests are not used as a suffix of the rptId they only serve to reroute the flow for testing on the states of the CR pipeline of the checkout fe */
  // Status AUTHORIZATION_REQUESTED tests
  AUTHORIZATION_REQUESTED_NO_NPG_OUTCOME,
  // Status AUTHORIZATION_COMPLETED tests
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_EXECUTED,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_AUTHORIZED,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_PENDING,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_VOIDED,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_REFUNDED,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_FAILED,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_CANCELED,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DENIED_BY_RISK,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_THREEDS_VALIDATED,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_THREEDS_FAILED,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_100,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_101,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_102,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_104,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_106,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_109,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_110,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_111,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_115,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_116,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_117,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_118,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_119,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_120,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_121,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_122,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_123,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_124,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_125,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_126,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_129,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_200,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_202,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_204,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_208,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_209,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_210,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_413,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_888,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_902,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_903,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_904,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_906,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_907,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_908,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_909,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_911,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_913,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_999,
  AUTHORIZATION_COMPLETED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_GENERIC,
  // Status CLOSURE_REQUESTED tests
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_EXECUTED,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_AUTHORIZED,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_PENDING,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_VOIDED,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_REFUNDED,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_FAILED,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_CANCELED,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DENIED_BY_RISK,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_THREEDS_VALIDATED,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_THREEDS_FAILED,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_100,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_101,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_102,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_104,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_106,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_109,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_110,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_111,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_115,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_116,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_117,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_118,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_119,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_120,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_121,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_122,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_123,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_124,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_125,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_126,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_129,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_200,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_202,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_204,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_208,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_209,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_210,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_413,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_888,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_902,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_903,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_904,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_906,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_907,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_908,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_909,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_911,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_913,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_999,
  CLOSURE_REQUESTED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_GENERIC,
  // Status CLOSURE_ERROR tests
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_EXECUTED,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_AUTHORIZED,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_PENDING,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_VOIDED,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_REFUNDED,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_FAILED,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_CANCELED,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DENIED_BY_RISK,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_THREEDS_VALIDATED,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_THREEDS_FAILED,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_100,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_101,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_102,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_104,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_106,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_109,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_110,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_111,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_115,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_116,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_117,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_118,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_119,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_120,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_121,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_122,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_123,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_124,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_125,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_126,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_129,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_200,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_202,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_204,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_208,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_209,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_210,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_413,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_888,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_902,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_903,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_904,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_906,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_907,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_908,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_909,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_911,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_913,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_999,
  CLOSURE_ERROR_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_GENERIC,
  // Errors on close payment
  CLOSURE_ERROR_WITH_NPG_ON_CLOSE_PAYMENT_ERROR_CODE_422_DID_NOT_RECEIVE_RPT,
  CLOSURE_ERROR_WITH_NPG_ON_CLOSE_PAYMENT_ERROR_CODE_422_OUTCOME_ALREADY_ACQUIRED,
  CLOSURE_ERROR_WITH_NPG_ON_CLOSE_PAYMENT_ERROR_CODE_400_REFUND_CASES,
  CLOSURE_ERROR_WITH_NPG_ON_CLOSE_PAYMENT_ERROR_CODE_404_REFUND_CASES,
  // Status CLOSED tests
  CLOSED_WITH_NPG_AUTH_STATUS_EXECUTED_SEND_PAYMENT_RESULT_NOT_RECEIVED,
  // Status UNAUTHORIZED
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_AUTHORIZED,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_PENDING,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_VOIDED,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_REFUNDED,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_FAILED,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_CANCELED,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DENIED_BY_RISK,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_THREEDS_VALIDATED,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_THREEDS_FAILED,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_100,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_101,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_102,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_104,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_106,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_109,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_110,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_111,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_115,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_116,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_117,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_118,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_119,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_120,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_121,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_122,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_123,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_124,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_125,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_126,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_129,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_200,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_202,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_204,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_208,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_209,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_210,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_413,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_888,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_902,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_903,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_904,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_906,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_907,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_908,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_909,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_911,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_913,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_999,
  UNAUTHORIZED_WITH_NPG_AUTH_STATUS_DECLINED_ERROR_CODE_GENERIC,
  // Status NOTIFICATION REQUESTED
  NOTIFICATION_REQUESTED_WITH_NPG_AUTH_STATUS_EXECUTED_AND_SEND_PAYMENT_RESULT_OK,
  NOTIFICATION_REQUESTED_WITH_NPG_AUTH_STATUS_EXECUTED_AND_SEND_PAYMENT_RESULT_KO,
  // Status NOTIFICATION_ERROR
  NOTIFICATION_ERROR_WITH_NPG_AUTH_STATUS_EXECUTED_AND_SEND_PAYMENT_RESULT_OK,
  NOTIFICATION_ERROR_WITH_NPG_AUTH_STATUS_EXECUTED_AND_SEND_PAYMENT_RESULT_KO,
  // Status NOTIFIED_OK,
  NOTIFIED_OK_WITH_NPG_AUTH_STATUS_EXECUTED_AND_SEND_PAYMENT_RESULT_OK,
  // Status NOTIFIED_KO,
  NOTIFIED_KO_WITH_NPG_AUTH_STATUS_EXECUTED_AND_SEND_PAYMENT_RESULT_KO,
  // Status EXPIRED
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_REQUESTED,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_EXECUTED,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_AUTHORIZED,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_PENDING,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_VOIDED,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_REFUNDED,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_FAILED,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_CANCELED,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DENIED_BY_RISK,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_THREEDS_VALIDATED,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_THREEDS_FAILED,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_100,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_101,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_102,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_104,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_106,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_109,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_110,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_111,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_115,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_116,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_117,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_118,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_119,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_120,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_121,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_122,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_123,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_124,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_125,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_126,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_129,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_200,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_202,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_204,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_208,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_209,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_210,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_413,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_888,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_902,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_903,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_904,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_906,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_907,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_908,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_909,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_911,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_913,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_999,
  EXPIRED_TRANSACTION_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_DECLINED_ERROR_CODE_GENERIC,

  EXPIRED_TRANSACTION_FOR_CLOSURE_REQUESTED_AUTH_STATUS_EXECUTED_AND_SEND_PAYMENT_RESULT_NOT_RECEIVED,
  EXPIRED_TRANSACTION_FOR_CLOSURE_ERROR_AUTH_STATUS_EXECUTED_AND_SEND_PAYMENT_RESULT_NOT_RECEIVED,

  EXPIRED_TRANSACTION_FOR_NOTIFICATION_REQUESTED_AUTH_STATUS_EXECUTED_AND_SEND_PAYMENT_RESULT_OK,
  EXPIRED_TRANSACTION_FOR_NOTIFICATION_ERROR_AUTH_STATUS_EXECUTED_AND_SEND_PAYMENT_RESULT_OK,

  EXPIRED_TRANSACTION_FOR_NOTIFICATION_REQUESTED_AUTH_STATUS_EXECUTED_AND_SEND_PAYMENT_RESULT_KO,
  EXPIRED_TRANSACTION_FOR_NOTIFICATION_ERROR_AUTH_STATUS_EXECUTED_AND_SEND_PAYMENT_RESULT_KO,
  // Status REFUND
  REFUND_REQUESTED_TRANSACTION_WITH_NPG_AUTH_STATUS_EXECUTED,
  REFUND_ERROR_TRANSACTION_WITH_NPG_AUTH_STATUS_EXECUTED,
  REFUNDED_TRANSACTION_WITH_NPG_AUTH_STATUS_EXECUTED,
  /** end pagopa-ecommerce: handle final outcome page for NPG status */
  /** start pagopa-ecommerce: handle final status outcome page for REDIRECT gateway */
  AUTHORIZATION_COMPLETED_WITH_REDIRECT_AUTH_STATUS_OK,

  AUTHORIZATION_COMPLETED_WITH_REDIRECT_AUTH_STATUS_KO,

  AUTHORIZATION_COMPLETED_WITH_REDIRECT_AUTH_STATUS_CANCELED,

  AUTHORIZATION_COMPLETED_WITH_REDIRECT_AUTH_STATUS_ERROR,

  AUTHORIZATION_COMPLETED_WITH_REDIRECT_AUTH_STATUS_EXPIRED,

  CLOSURE_REQUESTED_WITH_REDIRECT_AUTH_STATUS_OK,

  CLOSURE_REQUESTED_WITH_REDIRECT_AUTH_STATUS_KO,

  CLOSURE_REQUESTED_WITH_REDIRECT_AUTH_STATUS_CANCELED,

  CLOSURE_REQUESTED_WITH_REDIRECT_AUTH_STATUS_ERROR,

  CLOSURE_REQUESTED_WITH_REDIRECT_AUTH_STATUS_EXPIRED,

  CLOSURE_ERROR_WITH_REDIRECT_AUTH_STATUS_OK,

  CLOSURE_ERROR_WITH_REDIRECT_AUTH_STATUS_KO,

  CLOSURE_ERROR_WITH_REDIRECT_AUTH_STATUS_CANCELED,

  CLOSURE_ERROR_WITH_REDIRECT_AUTH_STATUS_ERROR,

  CLOSURE_ERROR_WITH_REDIRECT_AUTH_STATUS_EXPIRED,

  UNAUTHORIZED_WITH_REDIRECT_AUTH_STATUS_OK,

  UNAUTHORIZED_WITH_REDIRECT_AUTH_STATUS_KO,

  UNAUTHORIZED_WITH_REDIRECT_AUTH_STATUS_CANCELED,

  UNAUTHORIZED_WITH_REDIRECT_AUTH_STATUS_ERROR,

  UNAUTHORIZED_WITH_REDIRECT_AUTH_STATUS_EXPIRED,

  NOTIFICATION_REQUESTED_WITH_REDIRECT_AUTH_STATUS_OK_AND_SEND_PAYMENT_RESULT_OK,

  NOTIFICATION_REQUESTED_WITH_REDIRECT_AUTH_STATUS_OK_AND_SEND_PAYMENT_RESULT_KO,

  NOTIFICATION_ERROR_WITH_REDIRECT_AUTH_STATUS_OK_AND_SEND_PAYMENT_RESULT_OK,

  NOTIFICATION_ERROR_WITH_REDIRECT_AUTH_STATUS_OK_AND_SEND_PAYMENT_RESULT_KO,

  NOTIFIED_OK_WITH_REDIRECT_AUTH_STATUS_OK_AND_SEND_PAYMENT_RESULT_OK,

  NOTIFIED_KO_WITH_REDIRECT_AUTH_STATUS_OK_AND_SEND_PAYMENT_RESULT_KO,

  EXPIRED_TRANSACTION_WITH_REDIRECT_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_OK,

  EXPIRED_TRANSACTION_WITH_REDIRECT_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_KO,

  EXPIRED_TRANSACTION_WITH_REDIRECT_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_CANCELED,

  EXPIRED_TRANSACTION_WITH_REDIRECT_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_EXPIRED,

  EXPIRED_TRANSACTION_WITH_REDIRECT_FOR_AUTHORIZATION_COMPLETED_AUTH_STATUS_ERROR,

  EXPIRED_TRANSACTION_WITH_REDIRECT_FOR_CLOSURE_REQUESTED_AUTH_STATUS_OK_AND_SEND_PAYMENT_RESULT_NOT_RECEIVED,

  EXPIRED_TRANSACTION_WITH_REDIRECT_FOR_CLOSURE_ERROR_AUTH_STATUS_OK_AND_SEND_PAYMENT_RESULT_NOT_RECEIVED,

  EXPIRED_TRANSACTION_WITH_REDIRECT_FOR_NOTIFICATION_REQUESTED_AUTH_STATUS_OK_AND_SEND_PAYMENT_RESULT_OK,

  EXPIRED_TRANSACTION_WITH_REDIRECT_FOR_NOTIFICATION_ERROR_AUTH_STATUS_OK_AND_SEND_PAYMENT_RESULT_OK,

  EXPIRED_TRANSACTION_WITH_REDIRECT_FOR_NOTIFICATION_REQUESTED_AUTH_STATUS_OK_AND_SEND_PAYMENT_RESULT_KO,

  EXPIRED_TRANSACTION_WITH_REDIRECT_FOR_NOTIFICATION_ERROR_AUTH_STATUS_OK_AND_SEND_PAYMENT_RESULT_KO,

  REFUND_REQUESTED_TRANSACTION_WITH_REDIRECT_AUTH_STATUS_OK,

  REFUND_ERROR_TRANSACTION_WITH_REDIRECT_AUTH_STATUS_OK,

  REFUNDED_TRANSACTION_WITH_REDIRECT_AUTH_STATUS_OK
  /** end pagopa-ecommerce: handle final status outcome page for REDIRECT gateway */
}

type FlowCaseKey = keyof typeof FlowCase;
// type SendPaymentResultOutcomeCaseKey = keyof typeof SendPaymentResultOutcomeCase;
type GatewayCaseKey = keyof typeof GatewayCase;
type ErrorCodeCaseXPAYKey = keyof typeof ErrorCodeCaseXPAY;
type ErrorCodeCaseVPOSKey = keyof typeof ErrorCodeCaseVPOS;
type SendPaymentResultOutcomeEnumKey = keyof typeof SendPaymentResultOutcomeEnum;

export const getFlowFromRptId: (
  rptId: string
) => O.Option<FlowCase> = rptId => {
  const flowId = Number(rptId.slice(-2));
  if (flowId in FlowCase) {
    return O.some(flowId as FlowCase);
  } else {
    return O.none;
  }
};

export const getErrorCodeFromRptId: (rptId: string) => string = rptId =>
  rptId.slice(-5, -2);

export const getGatewayFromRptId: (
  rptId: string
) => O.Option<GatewayCase> = rptId => {
  const flowId = Number(rptId.slice(-6, -5));
  if (flowId in GatewayCase) {
    return O.some(flowId as GatewayCase);
  } else {
    return O.none;
  }
};

export const getSendPaymentResultOutcomeFromRptId: (
  rptId: string
) => O.Option<SendPaymentResultOutcomeCase> = rptId => {
  const flowId = Number(rptId.slice(-7, -6));
  if (flowId in SendPaymentResultOutcomeCase) {
    return O.some(flowId as SendPaymentResultOutcomeCase);
  } else {
    return O.none;
  }
};

export const getTransactionOutcomeFromRptId: (
  rptId: string
) => O.Option<TransactionOutcomeInfoCase> = rptId => {
  const flowId = rptId.slice(-21, -18);
  logger.info(`Request mockFlow cookie: [${flowId}]`);
  if (
    Object.values(TransactionOutcomeInfoCase).filter(v => v === flowId)
      .length === 1
  ) {
    return O.some(flowId as TransactionOutcomeInfoCase);
  } else {
    return O.none;
  }
};

export const getTransactionOutcomeRetryFromRptId: (
  rptId: string
) => number = rptId => {
  logger.info(`rptId = [${rptId}]`);
  const retryVal = Number(rptId.slice(-3, -2));
  logger.info(`Request retry cookie: [${retryVal}]`);
  return retryVal;
};

export const maybeGetFlowCookie: (
  req: express.Request
) => O.Option<FlowCase> = req =>
  pipe(
    O.fromNullable(req.cookies.mockFlow),
    id => {
      logger.info(`Request mockFlow cookie: [${req.cookies.mockFlow}]`);
      return id;
    },
    O.filter(id => id in FlowCase),
    O.map((id: FlowCaseKey) => FlowCase[id])
  );

export const getFlowCookie: (req: express.Request) => FlowCase = req =>
  pipe(
    maybeGetFlowCookie(req),
    O.getOrElse(() => FlowCase.OK as FlowCase)
  );

export const maybeGetTransactionOutcomeInfoCookie: (
  req: express.Request
) => O.Option<number> = req =>
  pipe(
    O.fromNullable(req.cookies.transactionOutcome),
    O.map(id => {
      logger.info(
        `Request outcome info cookie: [${req.cookies.transactionOutcome}]`
      );
      return Number.parseInt(id, 10);
    })
  );

export const maybeGetOutcomeInfoRetriesCookie: (
  req: express.Request
) => O.Option<number> = req =>
  pipe(O.fromNullable(req.cookies.transactionOutcomeRetries), id => {
    logger.info(
      `Request outcome info retries cookie: [${req.cookies.transactionOutcomeRetries}]`
    );
    return id;
  });

export const maybeGetSendPaymentResultCookie: (
  req: express.Request
) => O.Option<SendPaymentResultOutcomeEnum> = req =>
  pipe(
    O.fromNullable(req.cookies.sendPaymentResult),
    id => {
      logger.info(
        `Request sendPaymentResult cookie: [${req.cookies.sendPaymentResult}]`
      );
      return id;
    },
    O.filter(id => id in SendPaymentResultOutcomeCase),
    O.map(
      (id: SendPaymentResultOutcomeEnumKey) => SendPaymentResultOutcomeEnum[id]
    )
  );

export const maybeGetSessionIdCookie: (
  req: express.Request
) => O.Option<string> = req =>
  pipe(O.fromNullable(req.cookies.sessionId), id => {
    logger.info(`Request sessionId cookie: [${req.cookies.sessionId}]`);
    return id;
  });

export const getSessionIdCookie: (req: express.Request) => string = req =>
  pipe(
    maybeGetSessionIdCookie(req),
    O.getOrElse(() => "")
  );

export const getSendPaymentResultCookie: (
  req: express.Request
) => SendPaymentResultOutcomeEnum = req =>
  pipe(
    maybeGetSendPaymentResultCookie(req),
    O.getOrElse(() => (undefined as unknown) as SendPaymentResultOutcomeEnum)
  );

export const getOutcomeInfoCookie: (req: express.Request) => number = req =>
  pipe(
    maybeGetTransactionOutcomeInfoCookie(req),
    O.getOrElse(() => 0)
  );

export const getOutcomeInfoRetriesCookie: (
  req: express.Request
) => number = req =>
  pipe(
    maybeGetOutcomeInfoRetriesCookie(req),
    O.getOrElse(() => 0)
  );

export const maybeGetPaymentGatewayCookie: (
  req: express.Request
) => O.Option<string> = req =>
  pipe(
    O.fromNullable(req.cookies.paymentGateway),
    id => {
      logger.info(
        `Request paymentGateway cookie: [${req.cookies.paymentGateway}]`
      );
      return id;
    },
    O.filter(id => id in GatewayCase),
    O.map((id: GatewayCaseKey) => id)
  );

export const getPaymentGatewayCookie: (
  req: express.Request
) => string | undefined = req =>
  pipe(
    maybeGetPaymentGatewayCookie(req),
    O.getOrElseW(() => undefined)
  );

export const maybeGetErrorCodeCookie: (
  req: express.Request
) => O.Option<string> = req =>
  pipe(
    O.fromNullable(req.cookies.resultCodeGateway),
    id => {
      logger.info(
        `Request resultCode cookie: [${req.cookies.resultCodeGateway}]`
      );
      return id;
    },
    O.filter(
      id =>
        Object.values(ErrorCodeCaseXPAY).filter(v => v === id).length === 1 ||
        Object.values(ErrorCodeCaseVPOS).filter(v => v === id).length === 1
    ),
    O.map((id: ErrorCodeCaseVPOSKey | ErrorCodeCaseXPAYKey) => id)
  );

export const getErrorCodeCookie: (
  req: express.Request
) => string | undefined = req =>
  pipe(
    maybeGetErrorCodeCookie(req),
    O.getOrElseW(() => undefined)
  );

export const setFlowCookie: (
  res: express.Response,
  flowId: FlowCase
) => void = (res, flowId) => {
  logger.info(`Set mockFlow cookie to: [${FlowCase[flowId]}]`);
  res.cookie("mockFlow", FlowCase[flowId]);
};

export const setSessionIdCookie: (
  res: express.Response,
  sessionId: string
) => void = (res, sessionId) => {
  logger.info(`Set session cookie to: [${sessionId}]`);
  res.cookie("sessionId", sessionId);
};

export const setErrorCodeCookie: (
  res: express.Response,
  errorCodeId: string,
  gateway: GatewayCase | undefined
) => void = (res, errorCodeId, gateway) => {
  // eslint-disable-next-line @typescript-eslint/restrict-plus-operands
  if (gateway !== undefined) {
    switch (GatewayCase[gateway]) {
      case "XPAY":
        const errorIdXPAY = Number(errorCodeId).toString();
        if (
          Object.values(ErrorCodeCaseXPAY).filter(v => v === errorIdXPAY)
            .length === 1
        ) {
          logger.info(
            `Set resultCodeGateway cookie to: [${errorIdXPAY as ErrorCodeCaseXPAY}]`
          );
          res.cookie("resultCodeGateway", errorIdXPAY as ErrorCodeCaseXPAY);
        }
        break;
      case "VPOS":
        const errorIdVPOS = ("" + errorCodeId).slice(-2);
        if (
          Object.values(ErrorCodeCaseVPOS).filter(v => v === errorIdVPOS)
            .length === 1
        ) {
          logger.info(
            `Set resultCodeGateway cookie to: [${errorIdVPOS as ErrorCodeCaseVPOS}]`
          );
          res.cookie("resultCodeGateway", errorIdVPOS as ErrorCodeCaseVPOS);
        }
        break;
      default:
        res.clearCookie("resultCodeGateway");
    }
  }
};

export const setPaymentGatewayCookie: (
  res: express.Response,
  gatewayID: GatewayCase | undefined
) => void = (res, gatewayID) => {
  pipe(
    gatewayID,
    O.fromNullable,
    O.map(id => {
      logger.info(`Set paymentGateway cookie to: [${GatewayCase[id]}]`);
      res.cookie("paymentGateway", GatewayCase[id]);
    })
  );
};

export const setOutcomeRetriesCookie: (
  res: express.Response,
  value: number
) => void = (res, val) => {
  logger.info(`Set transactionOutcomeRetries cookie to: [${val}]`);
  res.cookie("transactionOutcomeRetries", val);
};

export const setTransactionOutcomeCaseCookie: (
  res: express.Response,
  transactionOutcome: TransactionOutcomeInfoCase | undefined,
  retryNumber: number | undefined
) => void = (res, transactionOutcome, retryNumber) => {
  logger.info(`Try to Set transactionOutcome cookie ${transactionOutcome}`);
  res.clearCookie("transactionOutcome");
  pipe(
    transactionOutcome,
    O.fromNullable,
    O.map(id => {
      logger.info(`Try to Set transactionOutcome cookie to: [${id}]`);
      if (
        Object.values(TransactionOutcomeInfoCase).filter(v => v === id)
          .length === 1
      ) {
        logger.info(`Set transactionOutcome cookie to: [${id}]`);
        logger.info(
          `Set transactionOutcome cookie to: [${Number.parseInt(id, 10)}]`
        );
        res.cookie("transactionOutcome", Number.parseInt(id, 10));
        logger.info(`Retry poll: ${id}`);
        setOutcomeRetriesCookie(res, retryNumber || 0); // It attempts 3 times before getting wanted value
      }
    })
  );
};

export const setSendPaymentResultOutcomeCookie: (
  res: express.Response,
  sendPaymentResultId: SendPaymentResultOutcomeCase
) => void = (res, sendPaymentResultId) => {
  logger.info(
    `Set sendPaymentResult cookie to: [${SendPaymentResultOutcomeCase[sendPaymentResultId]}]`
  );
  res.cookie(
    "sendPaymentResult",
    SendPaymentResultOutcomeCase[sendPaymentResultId]
  );
};

export enum XPayFlowCase {
  OK,
  MULTI_ATTEMPT_POLLING,
  NOT_FOUND
}

export const getXPayFlowCase = (paymentAuthorizationId: string): XPayFlowCase =>
  pipe(
    paymentAuthorizationId,
    E.fromPredicate(id => id.startsWith(XPAY_OK_PREFIX), identity),
    E.mapLeft(_ => XPayFlowCase.NOT_FOUND),
    E.map(id =>
      pipe(
        id,
        E.fromPredicate(
          reqId => reqId.startsWith(XPAY_POLLING_PREFIX),
          identity
        ),
        E.mapLeft(_ => XPayFlowCase.OK),
        E.map(_ => XPayFlowCase.MULTI_ATTEMPT_POLLING),
        E.toUnion
      )
    ),
    E.toUnion
  );

export enum VposStep {
  STEP_0,
  METHOD,
  CHALLENGE,
  AUTH,
  DENY,
  NOT_FOUND
}
type VposStepKey = keyof typeof VposStep;

export enum VposFlowCase {
  DIRECT_AUTH,
  METHOD_AUTH,
  CHALLENGE_AUTH,
  METHOD_CHALLENGE_AUTH,
  DIRECT_DENY,
  METHOD_DENY,
  CHALLENGE_DENY,
  METHOD_CHALLENGE_DENY,
  PAYMENT_NOT_FOUND
}

interface IVposMockInfo {
  readonly step: VposStep;
  readonly flowCase: VposFlowCase;
}

export const getVposFlow: (req: express.Request) => VposFlowCase = req => {
  const paymentAuthorizationId = req.params.paymentAuthorizationId.substring(
    0,
    2
  );
  const flowId = Number(paymentAuthorizationId);
  logger.info(`Request id: [${paymentAuthorizationId}], flow id: [${flowId}]`);
  if (flowId in VposFlowCase) {
    return flowId as VposFlowCase;
  } else {
    return VposFlowCase.DIRECT_DENY;
  }
};

export const getVposStepCookie: (req: express.Request) => VposStep = req =>
  pipe(
    O.fromNullable(req.cookies.vposMockStep),
    id => {
      logger.info(`Request vposMockStep cookie: [${req.cookies.vposMockStep}]`);
      return id;
    },
    O.filter(id => id in VposStep),
    O.map((id: VposStepKey) => VposStep[id]),
    O.getOrElse(() => VposStep.STEP_0 as VposStep)
  );

export const getVposMockInfo: (
  req: express.Request
) => IVposMockInfo = req => ({
  flowCase: getVposFlow(req),
  step: getVposStepCookie(req)
});

export const setVposFlowCookies: (
  res: express.Response,
  vposStep: VposStep
) => void = (res, vposStep) => {
  logger.info(`Set vposMockStep cookie to: [${VposStep[vposStep]}]`);
  res.cookie("vposMockStep", VposStep[vposStep]);
};

export const generateTransactionId = (prefix?: number): string =>
  pipe(
    O.fromNullable(prefix),
    E.fromOption(() => uuid()),
    E.map(() =>
      String(prefix)
        .padStart(2, "0")
        .concat(uuid().substring(2))
    ),
    E.toUnion,
    uuidStringValue => uuidStringValue.replace(/-/g, "")
  );
